/*
TRAITEMENT DES PARAMÈTRES D'URL

Introduction

Dans Express.js, il existe plusieurs méthodes pour gérer les informations transmises via l'URL. Parmi celles-ci, on trouve l'attribut params de l'objet req.
*/
/*
L'attribut req.params permet d'accéder aux données contenues dans l'URL via des paramètres de route. Par exemple :
Si l'URL est http://www.example.com/details/item1/part2
Voici comment récupérer ces données côté serveur :
app.get('/details/:element1/:element2', function (req, res) {
  console.log(req.params.element1); // affiche 'item1'
  console.log(req.params.element2); // affiche 'part2'
});
*/

/*
Exercices

Repartez du site développé dans l'exercice précédent. Pour naviguer entre les pages, transmettez la référence de chaque page dans l'URL en utilisant req.params.

*/

const express = require("express");
const app = express();
const fs = require("fs"); // module fs pour manipuler des fichiers
const path = require("path"); // module path pour travailler avec des chemins de fichiers

const port = 3000;

app.set("view engine", "ejs"); // moteur de template EJS
app.set("views", "./views"); // dossier contenant les fichiers de vue
app.use(express.static("public")); // dossier contenant les fichiers statiques (CSS, JS, images, etc.)

// Route pour la page d'accueil
app.get("/", (req, res) => {
  res.render("index_ejs");
});

// Route dynamique pour toutes les autres pages
// app.get("/:page", (req, res) => {
//   const page = req.params.page;
//   const cheminVue = path.join(__dirname, "views", `${page}_ejs.ejs`); // construction du chemin du fichier de vue correspondant
//   if (fs.existsSync(cheminVue)) {
//     // si le fichier de vue existe
//     res.render(`${page}_ejs`);
//   } else {
//     // sinon afficher la page d'erreur 404
//     res.status(404).render("404_ejs");
//   }
// });
app.get("/:page", (req, res) => {
  const page = req.params.page;
  console.log(page);
  res.render(`${page}_ejs`);
});
// Middleware pour la gestion des erreurs 404
app.use((req, res) => {
  res.status(404).render("404_ejs");
});

app.listen(port, () => {
  console.log(`Serveur 12 en écoute sur http://127.0.0.1:${port}/`);
});

*********exe12*******

/*
req.query est un objet JavaScript qui contient les paramètres de requête de la requête HTTP GET. 
Lorsqu'un utilisateur envoie une requête GET à un serveur web, les paramètres de requête sont inclus dans l'URL de la requête, après le point d'interrogation (?). 
Par exemple, dans l'URL suivante :
http://www.example.com/search?q=express&lang=en
les paramètres de requête sont q et lang, et leurs valeurs sont express et en, respectivement.
*/
/*
Notez que req.query ne fonctionne que pour les paramètres de requête de type GET. Si vous souhaitez traiter des données envoyées via une méthode POST, vous devez utiliser un autre objet de req appelé req.body et un middleware tel que body-parser pour récupérer les données envoyées dans le corps de la requête.
*/

/*
1 Créez un nouveau projet Express. 
Ajoutez une route GET à votre application Express qui affiche une page ejs qui contient un formulaire  simple avec deux champs de texte : 
un champ pour le nom et un champ pour l'âge. 
Le formulaire doit soumettre les données via une requête  GET (method) à une URL spécifique (action).

Ajoutez une nouvelle route GET à votre application Express pour gérer la requête de formulaire. La route doit récupérer les données envoyées via req.query, puis afficher un message de bienvenue avec le nom et l'âge saisis dans le formulaire dans une autre page ejs.

Testez votre application en accédant à l'URL de la route du formulaire (/formulaire, par exemple), puis en saisissant des données dans les champs de texte et en soumettant le formulaire. Vous devriez voir un message de bienvenue affiché avec les données saisies dans le formulaire.
*/

---------server
const express = require("express");
const app = express();

app.set("view engine", "ejs");
app.set("views", "./views");

// Middleware pour servir les fichiers statiques
app.use(express.static("public"));

// Route pour afficher le formulaire
app.get("/formulaire", (req, res) => {
  res.render("formulaire");
});

// Route pour afficher le message de bienvenue
app.get("/bienvenue", (req, res) => {
  const nom = req.query.nom;
  const prenom = req.query.prenom;
  const method = "GET";
  res.render("formData_ejs", { nom: nom, prenom: prenom, method: method });
});

// Démarrer le serveur
app.listen(3000, () => {
  console.log("Serveur en écoute sur le port 3000");
});
----------form
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>about</title>
    <link rel="stylesheet" href="/css/styles.css" />
  </head>
  <body>
    <%- include('partials/header') %>
    <header>
      <nav>
        <img src="/img/fullStack.png" alt="En-tête" />
        <a href="/">Accueil</a>
        <a href="/about">about</a>
        <a href="/contact">contact</a>
      </nav>
    </header>
    <h1>form get</h1>
    <main>
      <form action="/bienvenue" method="get">
        <div>
          <label for="nom">Nom:</label>
          <input type="text" id="nom" name="nom" />
        </div>
        <div>
          <label for="prenom">Prénom:</label>
          <input type="text" id="prenom" name="prenom" />
        </div>
        <button type="submit">Envoyer</button>
      </form>
    </main>
    <footer>
      <p>&copy; 2023 - Mon Site. Tous droits réservés.</p>
    </footer>
  </body>
</html>
--------------form data
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>about</title>
    <link rel="stylesheet" href="/css/styles.css" />
  </head>
  <body>
    <%- include('partials/header') %>
    <header>
      <nav>
        <img src="/img/fullStack.png" alt="En-tête" />
        <a href="/">Accueil</a>
        <a href="/about">about</a>
        <a href="/contact">contact</a>
      </nav>
    </header>
    <main>
      <h1>requette <%= method %></h1>
      <h2>Bienvenue, <%= nom %> <%= method %></h2> 
    </main>
    <footer>
      <p>&copy; 2023 - Mon Site. Tous droits réservés.</p>
    </footer>
  </body>
</html>

**********exe13
/*
GÉRER LES POSTS
*/

/*
Lorsqu'une requête post est utilisée, les données envoyées ne sont pas présentes dans l'url. 
Le traitement de ces données dans les requêtes en post se fait d'une façon un peu différente des requêtes avec la méthode get.

Pour gérer une requête POST avec Express, 
vous devez utiliser un middleware pour parser les données envoyées dans la requête. 
Le middleware le plus couramment utilisé pour cela est body-parser.

Voici les étapes à suivre pour gérer une requête POST avec Express :
  Installez le module body-parser en utilisant la commande 
  npm install body-parser.

  Requirez le module body-parser dans votre fichier index.js :const bodyParser = require('body-parser');
  Utilisez la méthode urlencoded du module body-parser pour parser les données envoyées dans la requête POST
    app.use(bodyParser.urlencoded({ extended: false }));

À partir de là, on peut utiliser dans la fonction de retour de la gestion du post (app.post) la propriété body de l'objet req qui contient autant de propriétés que de nombres d'éléments envoyés par la soumission du formulaire.

*/

/*
exercice

Créez un nouveau projet Express. 
Ajoutez une route GET à votre application Express qui affiche une page ejs qui contient un formulaire  simple avec deux champs de texte : 
un champ pour le nom et un champ pour l'âge. 
Le formulaire doit soumettre les données via une requête POST à une URL spécifique(action).

Ajoutez une nouvelle route post à votre application Express pour gérer la requête de formulaire. La route doit récupérer les données envoyées via req.body., puis afficher un message de bienvenue avec le nom et l'âge saisis dans le formulaire dans une autre page ejs.

Testez votre application en accédant à l'URL de la route du formulaire (/formulaire, par exemple), puis en saisissant des données dans les champs de texte et en soumettant le formulaire. Vous devriez voir un message de bienvenue affiché avec les données saisies dans le formulaire.

*/
-----srv

const express = require("express");
const bodyParser = require("body-parser");
const app = express();

app.set("view engine", "ejs");
app.set("views", "./views");

// Middleware pour servir les fichiers statiques
app.use(express.static("public"));

// Middleware pour parser les données envoyées dans la requête POST
app.use(bodyParser.urlencoded({ extended: false }));

// Route pour afficher le formulaire
app.get("/formulaireP", (req, res) => {
  res.render("formPost_ejs");
});

// Route pour gérer la requête POST du formulaire
app.post("/bienvenueP", (req, res) => {
  const nom = req.body.nom;
  const age = req.body.age;
  const method = "POST";

  res.render("formDataP_ejs", {
    nom: nom,
    age: `tu ne fais pas tes ${age} ans`,
    method: method,
  });
});

// Démarrer le serveur
app.listen(3000, () => {
  console.log("Serveur en écoute sur le port 3000");
});

----------form
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>about</title>
    <link rel="stylesheet" href="/css/styles.css" />
  </head>
  <body>
    <!-- <%- include('partials/header') %> -->
    <header>
      <nav>
        <img src="/img/fullStack.png" alt="En-tête" />
        <a href="/">Accueil</a>
        <a href="/about">about</a>
        <a href="/contact">contact</a>
      </nav>
    </header>
    <h1>form post</h1>
    <main>
      <form action="/bienvenueP" method="post">
        <div>
          <label for="nom">Nom:</label>
          <input type="text" id="nom" name="nom" />
        </div>
        <div>
          <label for="age">age:</label>
          <input type="text" id="age" name="age" />
        </div>
        <button type="submit">Envoyer</button>
      </form>
    </main>
    <footer>
      <p>&copy; 2023 - Mon Site. Tous droits réservés.</p>
    </footer>
  </body>
</html>
------data
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>about</title>
    <link rel="stylesheet" href="/css/styles.css" />
  </head>
  <body>
    <%- include('partials/header') %>
    <header>
      <nav>
        <img src="/img/fullStack.png" alt="En-tête" />
        <a href="/">Accueil</a>
        <a href="/about">about</a>
        <a href="/contact">contact</a>
      </nav>
    </header>
    <main>
      <h1>requette <%= method %></h1>
      <h2>Bienvenue, <%= nom %> <%= age %> ! <%= method %></h2>
    </main>
    <footer>
      <p>&copy; 2023 - Mon Site. Tous droits réservés.</p>
    </footer>
  </body>
</html>
